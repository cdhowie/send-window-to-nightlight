#!/bin/sh


# Copyright (c) 2023 Chris Howie <me@chrishowie.com>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


# Captures a screenshot of the current window, uploads it to nightlight.gg, and
# opens a browser to complete the upload process.
#
# Pass your API key to this script on the command line.  For example:
#
# # ./send-window-to-nightlight 'VGF4YXRpb24gaXMgdGhlZnQK'
#
# Many Linux desktop environments provide a "global shortcut" facility whereby
# a command can be executed in response to a user-defined combination of keys
# being pressed, no matter which window is currently active.  This is the
# intended way to run this script, as it will screenshot the active window.


has_bin() {
	command -v "$1" >/dev/null 2>&1
}

errbox() {
	if has_bin zenity; then
		zenity --no-wrap --title "$0" --error --text "$1"
	elif has_bin kdialog; then
		kdialog --title "$0" --error "$1"
	elif has_bin xmessage; then
		xmessage -center "$1"
	else
		echo "$0: $1" 2>&1
	fi
}

fail() {
	errbox "$1"
	exit 1
}

require() {
	if ! has_bin "$1"; then
		fail "Requires $1. Please install it using your distribution's package manager."
	fi
}

require_any() {
	for bin in "$@"; do
		if has_bin "$bin"; then
			return 0
		fi
	done

	fail "Requires one of: $@. Please install one using your distribution's package manager."
}

browse() {
	for bin in xdg-open sensible-browser; do
		if has_bin "$bin"; then
			"$bin" "$1" >/dev/null 2>&1
			return $?
		fi
	done

	fail "Missing xdg-open or sensible-browser."
}

apikey="$1"

if [ -z "$apikey" ]; then
	echo "Usage: $0 <nightlight-apikey>" 1>&2
	exit 1
fi

require_any zenity kdialog xmessage
require_any xdg-open sensible-browser
require scrot
require curl
require jq
require mktemp

if ! img="$(mktemp dbd.XXXXXXXX.png)"; then
	fail "Failed to create temporary file for screenshot."
fi

cleanup() {
	rm "$img"
	trap - INT HUP TERM
}

trap 'cleanup; exit 2' INT HUP TERM

if ! scrot -o -u "$img"; then
	fail "Failed to take screenshot."
fi

if ! resp="$(
	curl -s https://api.nightlight.gg/v1/upload -H "authorization: Bearer $apikey" -F "file=@\"$img\";type=image/png;filename=\"$(date '+%F %T').png\""
)"; then
	cleanup
	fail "Failed to upload screenshot."
fi

cleanup

if ! url="$(echo "$resp" | jq -r .data.url)"; then
	fail "jq invocation failed."
fi

case "$url" in
	https://nightlight.gg/upload/*)
		browse "$url"
		;;
	*)
		# We don't accept other URLs for security reasons.  xdg-open in
		# particular creates a confused deputy problem if we don't
		# verify the input.
		fail "Refusing to open unexpected URL:\n\n$url"
		;;
esac
